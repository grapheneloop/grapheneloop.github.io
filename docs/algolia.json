[{"content":"Hugo Techdoc Theme The Techdoc is a Hugo Theme for technical documentation. Features Modern, Simple layout Responsive web design Documentation menu (Select Menu style) Table Of Contents for the page (selective) Theme color Edit link to documentation repository Custom Shortcodes Code highlight with clipboard Alert panel Button Search Shortcode powered by Algolia Open Graph Analytics with Google Analytics, Google Tag Manager ","date":1508426775,"description":"Text about this post","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"http://localhost:34403/","publishdate":"2018-11-23T15:26:15Z","title":"Home title"},{"content":"Graphene Loop ","date":1397001600,"description":"","lastmod":"2014-04-09T00:00:00Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"http://localhost:34403/about/","publishdate":"2014-04-09T00:00:00Z","title":"About Graphene Loop"},{"content":"Introduction A function is an independent sequence of actions that can be reused and operates with a level of abstraction. It has the capability to accept input parameters and potentially provide an output. Each function consists of an execution process, a triggering mechanism, zero or more input parameters, and typically zero or one output result. When executed, it can either complete successfully or encounter errors and fail; with the option of including an exception handling mechanism. These attributes apply universally to any function or Function as a Service (FaaS) implementations.\nQualities of a function: Single Responsibility Principle An effective function should perform a singular, well-defined task, which encourages the principle of modularity.\nStatelessness/No Side Effects A well-constructed function should be devoid of state, meaning it does not alter global variables or induce unintended side effects. These functions encapsulate their behavior and maintain the integrity of the program\u0026amp;rsquo;s state, allowing for externalization of state, if needed.\nTestability A function should be capable of being tested both in isolation and within the context of its specific sub-domain.\nModularity and Reusability: A function should be designed for reusability. However, when considering a Function as a Service (FaaS) in a Microservices ecosystem, each instance of the function should be associated with a specific Bounded Context within one of the subdomains. For instance, the same AWS Lambda function can serve multiple subdomains and may be triggered from various trigger points.\nTypes of functions: Deterministic Functions Deterministic function is one which returns same output for a given input. This makes it are more predictable and more easily testable. Deterministic functions however can cause side effects.\nPure Functions Similar to deterministic functions, but additionally idempotent - i.e.can be called any number of times without causing any side effects. e.g. of a â€¦","date":1696778775,"description":"Function as a Service (FaaS)","lastmod":"2018-10-08T15:26:15Z","objectID":"c79dcbadc74036c6587b6fc24498e83b","permalink":"http://localhost:34403/faas/","publishdate":"2018-10-08T15:26:15Z","title":"Function as a Service (FaaS)"}]