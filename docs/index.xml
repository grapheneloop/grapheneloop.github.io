<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home title on Graphene Loop</title>
    <link>https://grapheneloop.github.io/</link>
    <description>Recent content in Home title on Graphene Loop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Oct 2017 15:26:15 +0000</lastBuildDate><atom:link href="https://grapheneloop.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Synchronous Communication</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/synch/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/synch/</guid>
      <description>Synchronous Communication between two systems means that the request will wait for response.
Advantages: Disadvantages: HTTP/RESTful APIs gRPC GraphQL </description>
    </item>
    
    <item>
      <title>Wifi Security Basics</title>
      <link>https://grapheneloop.github.io/security/wifi-security-basics/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/security/wifi-security-basics/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Asynchronous Communication</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/async/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/async/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Support for Multiple Communication Patterns</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/synch-and-async/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/synch-and-async/</guid>
      <description>Synchronous And Asychrnous with Messaging Queues Synchronous And Asychrnous using HTTP/RESTful APIs </description>
    </item>
    
    <item>
      <title>Mediator Pattern</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/mediator/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/mediator/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Intermediary Pattern</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/intermediary/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/intermediary/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Pub-Sub Model</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/pub-sub/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/pub-sub/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Callback</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/callback/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/callback/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Event Sourcing &amp; CQRS</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/event-sourcing-and-cqrs/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/event-sourcing-and-cqrs/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Remote Procedure Call</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/remort-procedure-call/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/remort-procedure-call/</guid>
      <description>Basis of Wifi Network Security Media Access Control (MAC) Address ifconfig you may see:
eth0: A physical network card used for LAN Network used in wired connection. wlan0: A physical network adapter used for wireless connection. lo: loopback virtual network interface which lets you use the localhost. This will not have a MAC address. Note: You may see different names for the interface names. The following assumes the name of wireless interface as wlan0 for simplicity &amp;amp; clarity.</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/websocket/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/websocket/</guid>
      <description>HTTP/RESTful APIs gRPC GraphQL </description>
    </item>
    
    <item>
      <title>Direct Database Access</title>
      <link>https://grapheneloop.github.io/interservice-communication-patterns/direct-database-access/</link>
      <pubDate>Tue, 03 Oct 2023 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/interservice-communication-patterns/direct-database-access/</guid>
      <description>HTTP/RESTful APIs gRPC GraphQL </description>
    </item>
    
    <item>
      <title>Markdown Syntax</title>
      <link>https://grapheneloop.github.io/sample/markdown-syntax/</link>
      <pubDate>Tue, 17 Nov 2020 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/sample/markdown-syntax/</guid>
      <description>Headings # Heading level 1 ## Heading level 2 ### Heading level 3 #### Heading level 4 ##### Heading level 5 ###### Heading level 6 Emphasis *Italic* **Bold** ~~Strikethrough~~ Horizontal Rule --- Lists Unordered Lists - First item - Second item - Third item - Fourth item or
* First item * Second item * Third item * Fourth item Ordered Lists 1. First item 2. Second item 3. Third item 4.</description>
    </item>
    
    <item>
      <title>Build-in Shortcodes</title>
      <link>https://grapheneloop.github.io/sample/build-in-shortcodes/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/sample/build-in-shortcodes/</guid>
      <description>See https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes
figure 2 People Sitting With View of Yellow Flowers during Daytime gist highlight &amp;lt;section id=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h1 id=&amp;#34;title&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; {{ range .Data.Pages }} {{ .Render &amp;#34;summary&amp;#34;}} {{ end }} &amp;lt;/div&amp;gt; &amp;lt;/section&amp;gt; tweet Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc. file supporthttps://t.co/X94FmYDEZJ #gohugo #golang @spf13 @bepsays
&amp;mdash; GoHugo.io (@GoHugoIO) June 21, 2017 vimeo youtube </description>
    </item>
    
    <item>
      <title>Custom Shortcodes</title>
      <link>https://grapheneloop.github.io/sample/custom-shortcodes/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/sample/custom-shortcodes/</guid>
      <description>Code highlight with clipboard sample/custom-shortcodes.html Copy {{&amp;lt; highlight html &amp;gt;}} &amp;lt;section id=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h1 id=&amp;#34;title&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; {{ range .Pages }} {{ .Render &amp;#34;summary&amp;#34;}} {{ end }} &amp;lt;/div&amp;gt; &amp;lt;/section&amp;gt; {{&amp;lt; /highlight &amp;gt;}} Alert panel Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://grapheneloop.github.io/security/installation/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/security/installation/</guid>
      <description>Install Hugo theme on your project If you have git installed, you can include hugo-theme-techdoc repository into your core repository as submodule using git submodule within your project directory.
cd your_project git submodule add https://github.com/thingsym/hugo-theme-techdoc.git themes/hugo-theme-techdoc For more information read the Hugo documentation.
Or download Hugo theme on your project If you have git installed, you can do the following at the command-line-interface within your project directory.
cd your_project/themes git clone https://github.</description>
    </item>
    
    <item>
      <title>Table of Contents</title>
      <link>https://grapheneloop.github.io/sample/table-of-contents/</link>
      <pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/sample/table-of-contents/</guid>
      <description>&amp;nbsp;Note The TableOfContents field with true in your content’s front matter will render a table of contents.
TableOfContents: true Setting the built-in .TableOfContents variables can configure what heading levels you want to include in TOC. See the built-in .TableOfContents variables settings
Section 1 Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://grapheneloop.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://grapheneloop.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>https://grapheneloop.github.io/hello_world/</link>
      <pubDate>Tue, 17 Oct 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/hello_world/</guid>
      <description>Hello world!</description>
    </item>
    
    <item>
      <title>Hello_world</title>
      <link>https://grapheneloop.github.io/posts/hello_world/</link>
      <pubDate>Tue, 17 Oct 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/posts/hello_world/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Screenshot</title>
      <link>https://grapheneloop.github.io/security/screenshot/</link>
      <pubDate>Sat, 26 Oct 2019 15:26:15 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/security/screenshot/</guid>
      <description>Theme color Menu style Open Menu Slide Menu Edit link </description>
    </item>
    
    <item>
      <title>Search Shortcode</title>
      <link>https://grapheneloop.github.io/sample/search-shortcode/</link>
      <pubDate>Mon, 30 Mar 2020 18:49:06 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/sample/search-shortcode/</guid>
      <description>&amp;nbsp;Note Search Shortcode powered by Algolia
You can create a search page just by adding search shortcode.</description>
    </item>
    
    <item>
      <title>Hello_world2</title>
      <link>https://grapheneloop.github.io/archives/hello_world2/</link>
      <pubDate>Sun, 17 Dec 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/archives/hello_world2/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world2</title>
      <link>https://grapheneloop.github.io/blog/hello_world2/</link>
      <pubDate>Sun, 17 Dec 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/blog/hello_world2/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world2</title>
      <link>https://grapheneloop.github.io/entry/hello_world2/</link>
      <pubDate>Sun, 17 Dec 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/entry/hello_world2/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world1</title>
      <link>https://grapheneloop.github.io/archives/hello_world1/</link>
      <pubDate>Fri, 17 Nov 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/archives/hello_world1/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world1</title>
      <link>https://grapheneloop.github.io/blog/hello_world1/</link>
      <pubDate>Fri, 17 Nov 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/blog/hello_world1/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world1</title>
      <link>https://grapheneloop.github.io/entry/hello_world1/</link>
      <pubDate>Fri, 17 Nov 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/entry/hello_world1/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world</title>
      <link>https://grapheneloop.github.io/archives/hello_world/</link>
      <pubDate>Tue, 17 Oct 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/archives/hello_world/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world</title>
      <link>https://grapheneloop.github.io/blog/hello_world/</link>
      <pubDate>Tue, 17 Oct 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/blog/hello_world/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>Hello_world</title>
      <link>https://grapheneloop.github.io/entry/hello_world/</link>
      <pubDate>Tue, 17 Oct 2017 14:00:45 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/entry/hello_world/</guid>
      <description>aaaaaa
vvvv
aaa</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://grapheneloop.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
Cobra Viper J Walter Weatherman Cast Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://grapheneloop.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://grapheneloop.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://grapheneloop.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
